Параграф 36

### 1. Какие критерии используются для оценки качества алгоритмов?
Качество алгоритмов оценивается по нескольким критериям:
- **Временная сложность**: количество элементарных операций, необходимых для выполнения алгоритма.
- **Пространственная сложность**: объем памяти, который требуется алгоритму для выполнения.
- **Корректность**: алгоритм должен давать правильные результаты для всех допустимых входных данных.
- **Устойчивость**: способность алгоритма работать в условиях ограниченных ресурсов и при различных входных данных.
- **Простота реализации**: насколько легко алгоритм можно реализовать и поддерживать.
- **Универсальность**: возможность использования алгоритма для решения различных задач.

### 2. Почему скорость работы алгоритма оценивается не временем выполнения, а количеством элементарных операций?
Оценка скорости работы алгоритма через количество элементарных операций позволяет:
- **Избежать зависимости от аппаратного обеспечения**: Время выполнения может варьироваться в зависимости от процессора, памяти и других факторов, тогда как количество операций более стабильно.
- **Сравнивать алгоритмы независимо от среды выполнения**: Это помогает разработчикам оценивать алгоритмы в теоретическом плане, без учета конкретных реализаций.

### 3. Как учитывается размер данных при оценке скорости алгоритма?
Размер данных учитывается через асимптотику, которая показывает, как меняется время выполнения алгоритма в зависимости от размера входных данных (обычно обозначается как n). Например, если алгоритм имеет временную сложность O(n), это означает, что время выполнения растет линейно с увеличением размера входных данных. Для оценки скорости алгоритма часто анализируются пределы, когда n стремится к бесконечности.

### 4. Что означают записи O(1), O(n), O(n²) и O(2^n)?
- **O(1)**: Константная сложность. Время выполнения не зависит от размера входных данных.
- **O(n)**: Линейная сложность. Время выполнения растет пропорционально размеру входных данных.
- **O(n²)**: Квадратичная сложность. Время выполнения пропорционально квадрату размера входных данных. Обычно встречается в алгоритмах, использующих вложенные циклы.
- **O(2^n)**: Экспоненциальная сложность. Время выполнения удваивается с каждым добавлением нового элемента. Обычно встречается в алгоритмах, решающих задачи с полным перебором.

### 5. В каких случаях алгоритм, имеющий асимптотическую сложность O(n²), может работать быстрее, чем алгоритм с асимптотической сложностью O(n)?
- **Маленькие размеры входных данных**: Для небольших n алгоритм O(n²) может выполняться быстрее, чем O(n), из-за меньших накладных расходов на запуск и управление.
- **Константы и коэффициенты**: Алгоритм с O(n) может иметь высокие константы, что делает его медленнее на практике, чем алгоритм O(n²) с низкими константами.
- **Оптимизация**: Алгоритм O(n²) может быть лучше оптимизирован (например, использовать более эффективные структуры данных), что позволяет ему работать быстрее для определенных наборов данных.
