39

1. **Что такое структура? В чём её отличие от массива?**
   В Python для создания структур используется класс или именованный кортеж (например, `collections.namedtuple`). Структура (или запись) объединяет разные типы данных под одним именем. Массив же (например, список в Python) хранит элементы одного типа. То есть структура может содержать, например, строку и число, а массив — только числа или только строки.

2. **В каких случаях использование структур даёт преимущества? Какие именно? Приведите примеры.**
   Использование структур (или классов) дает преимущества в организация данных. Например, если необходимо хранить информацию о человеке, можно создать класс `Person`, который будет содержать информацию о его имени, возрасте и адресе. Это улучшает читаемость и поддерживаемость кода:
   ```python
   class Person:
       def __init__(self, name, age, address):
           self.name = name
           self.age = age
           self.address = address

   person = Person("Alice", 30, "123 Main St.")
   ```

3. **Как объявляется новый тип данных в Python? Выделяется ли при этом память?**
   Объявление нового типа данных в Python происходит через определение класса. Память выделяется только тогда, когда создается объект этого класса:
   ```python
   class Point:
       def __init__(self, x, y):
           self.x = x
           self.y = y

   p = Point(10, 20)  # здесь выделяется память
   ```

4. **Как обращаются к полю структуры? Расскажите о точечной нотации.**
   К полям структуры (класса) в Python обращаются с помощью точечной нотации. Например:
   ```python
   p = Point(10, 20)
   print(p.x)  # доступ к полю x
   print(p.y)  # доступ к полю y
   ```

5. **Как определить, сколько байтов памяти выделяется на структуру?**
   В Python нет стандартного способа узнать, сколько байтов занимает объект. Однако можно использовать модуль `sys` для определения размера объекта:
   ```python
   import sys
   p = Point(10, 20)
   print(sys.getsizeof(p))  # выводит размер объекта
   ```

6. **Что такое типизированный файл? Чем он отличается от текстового?**
   В Python нет строгой типизации файлов, как в некоторых других языках программирования. Однако в контексте «типизированного файла» можно говорить о бинарных файлах, которые хранят данные в определенном формате. Они отличаются от текстовых файлов тем, что текстовые файлы содержат символы, которые можно читать и редактировать, в то время как бинарные файлы могут содержать данные в формате, который нельзя воспринимать как текст.

7. **Как работать с типизированными файлами?**
   Для работы с бинарными файлами в Python можно использовать встроенные функции `open`, а также методы `read`, `write`. Например:
   ```python
   with open('data.bin', 'wb') as f:
       f.write(b'\x00\x01\x02')  # запись бинарных данных

   with open('data.bin', 'rb') as f:
       data = f.read()  # чтение бинарных данных
   ```

8. **Как можно сортировать структуры?**
   Для сортировки объектов класса (или структур) можно использовать функцию `sorted()` или метод `.sort()`, указывая ключ сортировки. Например:
   ```python
   persons = [Person("Alice", 30, "Addr1"), Person("Bob", 25, "Addr2")]
   sorted_persons = sorted(persons, key=lambda p: p.age)  # сортировка по возрасту
   ```

9. **В каких случаях при сортировке желательно не перемещать структуры в памяти?**
   В Python объекты управляются автоматически, так что обычно это не является проблемой. Однако, если необходимо сохранить ссылки на оригинальные данные и избежать их перемещения, можно использовать списки указателей (или ссылок) на объекты.

10. **Что такое указатель?**
    В Python указатели как таковые отсутствуют. Однако строки, списки и экземпляры классов работают по ссылке, что можно сравнить с указателями в других языках. Это значит, что когда вы присваиваете переменную другому объекту, обе переменные ссылаются на один и тот же объект в памяти.

11. **Как записать в указатель адрес переменной?**
    В Python не нужно делать этого, так как все определяется автоматически. Если вы хотите "писать" адреса, вы можете просто передавать объекты в функции:
    ```python
    def update_value(obj):
        obj.value += 1

    class ValueHolder:
        def __init__(self, value):
            self.value = value

    holder = ValueHolder(10)
    update_value(holder)  # передаем объект
    ```

12. **Как обращаться к полям структуры через указатель?**
    Как уже упоминалось, в Python указатели отсутствуют как таковые. Однако доступ к полям осуществляется через точки, как и прежде:
    ```python
    print(holder.value)  # доступ к полю value
    ```

13. **Как используются указатели при сортировке?**
    В Python для сохранения ссылок на объекты можно использовать списки. Сортируя список объектов, вы фактически сортируете ссылки на них, а не перемещаете сами объекты:
    ```python
    def sort_objects(objs):
        return sorted(objs, key=lambda x: x.value)

    sorted_holders = sort_objects([holder1, holder2, holder3])
    ```

