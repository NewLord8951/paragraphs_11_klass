1. **Компоненты** — это предопределенные элементы пользовательского интерфейса или функциональности, которые можно использовать в приложениях. Они нужны для упрощения разработки, так как позволяют быстро создавать интерфейсы и добавлять функционал без необходимости писать код с нуля.

2. **Связь компонентов и идеи инкапсуляции** заключается в том, что компоненты объединяют данные (свойства) и методы (функции) в одном объекте. Это позволяет скрыть внутреннюю реализацию и предоставить пользователю только необходимые интерфейсы для взаимодействия с компонентом.

3. **Родительский объект** — это объект, который содержит другой объект (дочерний). Это означает, что дочерний объект наследует свойства и методы родительского объекта и может использовать их, а также может быть размещен внутри родительского объекта.

4. **Свойство Align** определяет, как элемент управления будет размещен на форме относительно других элементов. Оно позволяет автоматически изменять размер и положение компонента при изменении размеров родительского контейнера (например, формы или панели).

5. **Стандартный диалог** — это предопределенные окна для выполнения общих задач, таких как открытие файлов, сохранение файлов или выбор цвета. Их можно использовать через соответствующие компоненты (например, `TOpenDialog`, `TSaveDialog`) для упрощения взаимодействия с пользователем.

6. **Основное свойство флажка-выключателя** — это `Checked`, которое указывает, включен ли флажок или выключен. Его можно использовать для проверки состояния флажка в коде и выполнения соответствующих действий.

7. **Сложные свойства**, такие как `Font`, представляют собой объекты с собственными свойствами (например, `Name`, `Size`, `Style`). Это позволяет более гибко настраивать внешний вид текста в компонентах.

8. **Шрифт по умолчанию** для компонентов обычно зависит от настроек операционной системы и среды разработки, но часто это шрифт типа "Tahoma" или "Arial" размером 8 или 10 пунктов.

9. **Метка** — это элемент управления, который отображает текст на форме. Она используется для отображения информации пользователю без возможности редактирования.

10. **Функции StrToInt и IntToStr** используются для преобразования строк в целые числа и наоборот. Это необходимо при работе с пользовательским вводом, когда нужно конвертировать данные из одного формата в другой.

11. **Обработка ошибок** в современных программах часто осуществляется с помощью исключений (try...except). Преимущества этого подхода включают более чистый код и возможность централизованного управления ошибками; недостатки могут заключаться в сложности отладки и возможных скрытых ошибок при неправильной обработке исключений.

12. **Блокировка некорректных символов при вводе** может быть реализована с помощью событий клавиатуры (например, `OnKeyPress`), где можно проверять введенные символы и отменять ввод некорректных значений:
    ```pascal
    procedure TForm1.Edit1KeyPress(Sender: TObject; var Key: Char);
    begin
      if not (Key in ['0'..'9', #8]) then // Разрешаем только цифры и Backspace
        Key := #0; // Блокируем ввод
    end;
    ```
